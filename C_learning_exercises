🦈🦈🦈
//Item A job
//function: Binary one-time equations（二元一次方程）
#include<stdio.h>
#include<math.h>
int main ()
{
	float a,b,c;
	float x1,x2;
	float A,B,C,D;
	scanf("%f%f%f",&a,&b,&c);
	A=sqrt(b*b-4*a*c); //deta:∆
	B=(-b+A);
	C=(-b-A);
	D=2*a;
	x1=B/D;
	x2=C/D; //The values of the two solutions
	printf("x1=%.2f,x2=%.2f",x1,x2); //Prints out the results
	return 0;
}


//item G job
//function: Read the ID card information
#include<stdio.h>
int main()
{
    int a,b,c,i;
 scanf("%*6d%4d%2d%2d",&a,&b,&c); //input dates
 i=a+b+c;
 printf("%-10d%02d    %02d%6d",a,b,c,i); // output information
return 0;
}


//item C job
//function: Grade the score
#include<stdio.h>
int main()
{
	int a;
	char i;
	scanf("%d",&a);
	if(a>=90) printf("A");
	else if (a>=80) printf("B");
	else if (a>=70) printf("C");
	else if (a>=60) printf("D");
	else printf("E");
	
	return 0;
}


//item D job
//function: grade
#include<stdio.h>
int main ()
{
	int I =0;
	int B =0;
	scanf("%d",&I);
	if (I<=100000)  B=0.1*I;
	else if (I<=200000) B=10000+0.075*(I-100000);
	else if (I<=400000) B=17500+0.05*(I-200000);
	else if (I<=600000) B=27500+0.03*(I-400000);
	else if (I<=1000000) B=33500+0.015*(I-600000);
	else B=39500+0.01*(I-1000000);
	printf("%d",B);
	return 0;
}


//notices
//item E job
//function: The output is determined by the month for the number of days in the month
#include<stdio.h>
int main ()
{
	int A,B,C=0;
	scanf ("%4d%d",&A,&B);
	switch(B)
	{
	case 1:
	case 3:
	case 5:
	case 7:
	case 8:
	case 10:
	case 12:
		C=31;
		break; //month:1,3,5,7,8,10,12 has 31 days
	case 4:
	case 6:
	case 9:
	case 11:
		C=30;
		break;
case 2:
	if (A%4==0&&A%100!=0||A%400==0) //condtion
		C=29;
	else
		C=28;
	}
printf("%d",C);
	return 0;
}


//item F job
//function: Additive calculations
#include<stdio.h>
int main()
{
	int a,b,c=0;
	scanf("%d,%d",&a,&b);
	c=a+b;
	printf("%d",c);
	return 0;
}


//item J job
// use functions
//function: Calculate the maximum value
int max(int x,int y)
{
	if(x>y) return x;
	else return y;
	return 0;
} // Function judgment
#include<stdio.h>
int main()
{
	int a ,b ,c=0;
	int A,B=0;
	scanf("%d%d%d",&a,&b,&c);
	A=max(a,b);
	B=max(A,c); //output max
	printf("%d",B);
	return 0;
}


//item K job
// Too cumbersome
// Wait for improvement
#include<stdio.h>
int main()
{
	int A,B,C,D,E,F,G=0;
	scanf("%d",&A);
	if(A/10000>=1){
			B=A/10000;
		C=(A-B*10000)/1000;
		D=(A-B*10000-C*1000)/100;
		E=(A-B*10000-C*1000-D*100)/10;
		F=A-B*10000-C*1000-D*100-E*10;
		G=F*10000+E*1000+D*100+C*10+B;
		printf("5\n%d %d %d %d %d\n%d",B,C,D,E,F,G);}
	else if(A/1000>=1){
		C=A/1000;
			D=(A-C*1000)/100;
			E=(A-C*1000-D*100)/10;
			F=A-C*1000-D*100-E*10;
			G=F*1000+E*100+D*10+C;
		printf("4\n%d %d %d %d\n%d",C,D,E,F,G);}
	else if (A/100>=1){
		D=A/100;
			E=(A-D*100)/10;
			F=A-D*100-E*10;
			G=F*100+E*10+D;
		printf("3\n%d %d %d\n%d",D,E,F,G);}
	else if(A/10>=1){
		E=A/10;
			F=A-E*10;
			G=F*10+E;
		printf("2\n%d %d\n%d",E,F,G);}
	else{
		printf("1\n%d\n%d",A,A);
	}
	return 0;
}


//****** Pay special attention
//attention：#define _CRT_SECURE_NO_WARNINGS 1在有scanf时要加上 或者将scanf写成scanf_s
// item I job 
// Four operations
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	float A,B,C=0;
	char i;
	scanf("%f",&A);
	scanf(" %c ",&i);//***
	scanf("%f",&B);
	switch(i)
	{
	case'+':
		C=A+B;
		printf("%.2f + %.2f = %.2f",A,B,C);
		break;
	case'-':
		C=A-B;
		printf("%.2f - %.2f = %.2f",A,B,C);
		break;
	case'*':
		C=A*B;
		printf("%.2f * %.2f = %.2f",A,B,C);
		break;
	case'/':
		C=A/B;
		printf("%.2f / %.2f = %.2f",A,B,C);
		break;
	default:
		printf("erro!");
		break;
	}
	return 0;
}


//item H job
// Normal printing
#include<stdio.h>
int main()
{
	printf("**************************\n");
	printf("         Very    Good!    \n");
	printf("**************************");
    return 0;
}


//item L job
//function: cumulative
#include<stdio.h>
int he(int n)
{
	int a=1;
	int sum=0;
	while(a<=n)
		sum+=a++;
	//+=的意思:sum=sum+a++;
	//a++是先使用a的值，然后再对a做加1处理
	//而++a表示先对a做加1处理，再使用a的值。a++和++a都等价于【a=a+1】.
	return sum;
}
int main ()
{
	int n;
	scanf("%d",&n);
	printf("%d",he(n));
	return 0;
}
// -:)


//item M job
//Note that when the sum of the reciprocals is counted, it takes 1.0/c to output the correct result
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int A,b,n,i;
	int sum1 = 0 ;
	int sum2 = 0 ;
	float sum3 = 0 ;
	int h , c ;
	scanf("%d %d",&n,&i);
	for(A=1;A<=n;A++)
	sum1 = sum1 + A ;

	for(b=1; b<=i; b++)
		sum2 = sum2 + b*b ;
	printf("%.2f",sum1+sum2+sum3);
	return 0;
}


//item N job🥱🥱🥱
//function: Combination of if and for.
#include<stdio.h>
int main()
{
	int i;
	for(i=100;i<1000;i++){
	int a,b,c;
	a=i/100;
	b=(i-100*a)/10;
	c=i-100*a-10*b;
	if(i==a*a*a+b*b*b+c*c*c)
		printf("%d\n",i);}
	return 0; 
}


//item O job 
//function:Swap the value of the variable.
#include<stdio.h>
int main()
{
	float sum=0;
	float a=2.0;
	float b=1.0;
	float t;
	int N=1;
	int i;
	scanf("%d",&N);
	for(i=0;i<N;i++)
	{   sum+=a/b;
		t=a;
		a=a+b;//这两行不能互换//交换两个变量的值时，需要一个空杯子
		b=t;//这里的b是上一个a的值，因此不能写成a=b
	}
	printf("%.2f",sum);
	return 0;
}


//item P job
// First of all, you have to master the mathematical conditions: what kind of number is prime?
// Primes are integers greater than 1
// If a number can be divisible by a number within half of it (or a number within its square number), then the number is not prime
// Otherwise it is a prime number
// function: Find prime numbers between n and m and output.

#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<math.h>
int fun(int n)
{
	int i;	
	for(i=2;i<=n/2;i++)
	{
	if(n%i==0)
		return 0;
	//不能有break
	}
	if(i>n/2) 
		return 1;
}
int main()
{
	int x , y =0 ;
	int i = 0 ;
	scanf("%d,%d",&x ,&y ) ;
	for(i=x ; i<=y ; i++)
	{
	fun(i) ;
	if(fun(i))
	printf("%d ", i) ;
	}
}


// Ditto another method
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
	int fun (int n)
{
	int q = 1;
	int count = 0;
	for (q = 2; q <= n / 2; q++)
	{
		if (n % q == 0)
		{
			count++;
			break;
		}
	}
	if (count == 1)
		return 0;
	else
		return 1;
}
int main()
{
	int j;
	int i =1;
	int n=i;
	scanf("%d,%d", &i, &j);
	
	for (n = i; n <= j; n++)
	{
		int k = fun(n);
		if (k == 1)
			printf("%d ", n);
	}
}


//item Q job
//function: Find the cubic sum of the numbers between 100 and n equal to the three digits of 1099.
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int fun(int n)
{
	
	int i, x, y ;
	i = n / 100 ;
	x = (n-i*100) / 10 ;
	y = n - i*100 - x*10 ;
	if ( i*i*i + x*x*x + y*y*y == 1099)
		return 1 ;
	else return 0 ;

}

int main()
{
	int n = 0 ;
	int a ;
	scanf("%d", &n) ;
	for(a=100 ; a<=n ; a++)
	{
		if(fun(a))
		printf("%d ", a) ;
	}
}

//item R job
//function: Find all complete numbers from 1 to n.
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int fun(int n)
{
	int a,b =0;
	for (a=1;a<=n;a++)
	{
		if(n%a==0)
		{
			b+=a;
		}
	}
	if(n*2==b){ return 1;}
	else{return 0;}

}

int main()
{
	int i =0;
	int n ;
	scanf("%d",&i);
	for(n=1;n<=i;n++)
	{
		if(fun(n))
		printf("%d ",n);
		
	}
}


//Determines whether a number is a square number: if(sqrt(n)==(int)(sqrt(n)))※.
※※※Mark with flag++.
//item S job
//function: Find numbers within 1000 to n that satisfy a particular meaning.
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<math.h>
int fun(int n)
{
	int flag = 0 ;
	int k ;
	if(sqrt(n)==(int)(sqrt(n))) //※
	{
		flag++;
	}
	while(n)
	{
		k = n % 100 ;
		if(sqrt(k) == (int)(sqrt(k)))
		{
			flag++ ;
		}
		n =n/100;
	}
	if(flag == 3) return 1 ;
	else return 0 ;
}
int main()
{
	int n = 1 ;
	int i ;
	scanf("%d", &n ) ;
	for(i=1000 ; i<=n ; i++)
	{
		if(fun(i))
		printf("%d ", i ) ;
	}
 }


//n的阶乘
#include<stdio.h>
int main()
{
	int i = 0;
	int n = 0;
	int ret = 1;
	printf("请输入n的值：");
	scanf("%d",&n);
	for(i=1 ;i<=n ;i++)
	{
		ret = ret * i;
	}
	printf("ret= %d\n",ret);
	return 0;
}

//计算1!+2!+3!+4!+5!+6!+7!+8!+9!+10!
#include<stdio.h>
int main()
{
	int i = 0;
	int n = 0;
	int ret = 1;
	int sum = 0; 
	
	for(n=1;n<=10;n++)
	{
		ret = 1 ;//!!!!
		//在这里，如果不写ret=1，那么会出现累乘的结果！
	    for(i=1 ;i<=n ;i++)
	    {
		    ret = ret * i;
	    }
	    sum =sum + ret;
	    
	    //ret=1*1
	    //ret=1*1*2
	    //ret=1*1*2*3//如果不再次写入ret=1，那么将成为：ret=2*1*2*3。
	    //......
	}
	printf("sum= %d",sum);
	return 0;
}

//对上面的改进✨
//可以减少一次循环，达到跟简洁的目的。
#include<stdio.h>
int main()
{
	int i = 0;
	int n = 0;
	int ret = 1;
	int sum = 0; 
	
	for(n=1;n<=10;n++)
	{

	    ret = ret * n;	    
	    sum =sum + ret;
	    
	    //ret=1*1
	    //ret=1*1*2
	    //ret=1*1*2*3
	    //......
	}
	printf("sum= %d",sum);
	return 0;
}



//C语言学习中的练习
//函数部分


void excel(int, int ,int ,int )
{

}
int main ()
{
	int a = 0 ;
	int v1 = 0, v2 = 0 ,v3 = 0 ,v4 = 0, v5 = 0, v6 = 0 ;

	excel((v1,v2),(v3,v4),v5,v6); //逗号表达式
	//（v1 , v2）的结果是后一个，即v2
	//（v3 , v4）的结果是v4
	//所以函数调用其实是：excel(v2, v4, v5, v6)
	//4个实参✨
	return 0 ;
}


//二维数组初始化
//int arr[2][] = {(0,1,2),(3,4,5)}; //err 二维数组可以不写行数，但必须得写列数！✨
//int arr[][3] = {(0,1,2),(3,4,5)};//正确
//int arr[2][4] = {(0,1,2),(3,4),(5)}; //err 有几个()，就有几行，3!=2，错误
//int arr[][3] = {(0,,2),(3,4,5)}; //err 漏掉一个数


int main()
{
	int arr[2][3] = {1,2,3,4,5} ;//两行三列
	//值为4的数组元素为？
	//先按列数将划()分行
	printf("%d\n",arr[1][0]);
	//即arr[1][0]
	return 0 ;
}


//每天练一遍的代码
//交换一个数组的前后依次的元素
void reverse(int  arr[], int sz)
{
	int left = 0 ;
	int right = sz -1 ;
	while(left < right)
	{
		int tmp = arr[left];
		arr[left] = arr[right] ;
		arr[right] = tmp ;
		left ++ ;
		right --;

	}
}
void Init(int arr[], int sz)
{
	int i = sz;
	for(i = 0 ; i <sz ; i++)
	{
		arr[i] = 0;
	}
}

void Printf(int arr[], int sz)
{
	int i = 0 ;
	for(i = 0 ; i< 10 ; i++)
	{
		printf("%-2d ",arr[i]);
	}
	printf("\n");
}
int main()
{
	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
	int i = 0 ;
	int sz = sizeof(arr) / sizeof(arr[0]) ;

	
	Printf(arr, sz);
	//Init(arr,sz); //初始化
	reverse(arr,sz);
	Printf(arr, sz);
	return 0 ;
}


//0 0 3 4 5
int main()
{
	int arr[] = {1,2,3,4,5};
	short * p = (short*) arr ;
	int i = 0;
	for(i=0; i<4 ;i++)
	{
		*(p + i) = 0;
	}
	for(i = 0; i< 5; i++)
	{
		printf("%d ",arr[i]);
	}
	return 0 ;
}


int main()
{
	int a = 0x11223344 ;
	char * pc = (char*)& a ;
	*pc = 0;
	printf("%x\n",a); //%x表示打印16进制的数
	return 0 ;
}


int i ; //全局变量未定义，默认初始化为0 //全局变量定义在所有函数之外
int main ()
{
	i-- ;
	//一个有符号数和一个无符号数比较时
	//将有符号数看做成无符号数
	//所以-1的符号位将算作大小 ，会变得很大
	if(i > sizeof(i)) //sizeof计算变量//类型所占内存的大小 >=0 是一个无符号数
	{
		printf(">\n"); //结果是 >
	}
	else
	{
		printf("<\n");
	}
	return 0 ;
}


//注意赋值操作符=的优先级大于,
int main()
{
	int a ,b ,c;
	a = 5 ;
	c = ++ a ;
	b = ++c , c++ , ++a, a++ ; //b值为7，c值为8
	//所以是先b = ++c，再进行下面程序
	b += a++ + c; //a值为9
	//b = 7 + 16
	printf("a = %d\nb = %d\nc = %d\n",a,b,c); //9 23 8
	return 0 ;
}


//计算一个十进制数转换成二进制数后1的个数
#include<stdlib.h>
int count_1( int a) //unsigned int 把有符号数转换成无符号数即可
{
	//方法3，最高效简洁！//✨✨✨
	int count = 0 ;
	while(a)
	{
		a = a&(a-1);
		count ++;
	}
	//方法2
	//int i = 0 ;
	//for(i = 0 ; i<32 ; i++)
	//{
	//	if( (a >> i) &1 == 1)
	//	{
	//		count ++ ;
	//	}
	//}

	//方法1
	//需要将int a 改成 unsigned int a
	//while( a ) //不用写a > 0
	//{
	//	if(a%2 == 1)
	//	{
	//		count++ ;	
	//	}
	//	a = a/2 ;
	//}
	return count ;
}
int main()
{
	int a = 0;
	printf("请输入:>");
	scanf("%d",&a);
	//像一个十进制数1231，计算有多少个1
	//是先%10
	//再/10
	//反复循环
	//直到为0
	printf("%d\n",count_1(a));
	//写完如下代码，可以不用调节控制台。不建议
	//system("pause"); //system - 库函数 -执行系统命令 - 暂停
	return 0 ;
}


#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

//两个数的二进制不同位的个数
//利用 按位异或 ：相同的位0 ，不同的为1
//再根据上面：计算1个个数
//即可写出
int get_diff_bit(int a,int b)
{
	int count = 0 ;
	int tmp = a ^ b;
	while(tmp)
	{
		tmp = tmp &(tmp-1);//✨
		count ++ ;
	}
	return count ;
	
}
int main()
{
	int a = 0 , b = 0 ;
	int c = 0;
	scanf("%d%d",&a,&b);
	c = get_diff_bit(a,b);
	printf("不同位的个数：%d\n",c);
	return 0 ;
}


//分别打印出一个数转换成二进制数后的奇数位和偶数位
void print(int a)
{
	int i = 0 ;
	printf("奇数位：\n");

	for(i = 30 ; i >=0 ; i-=2) //首先，从低位到高位！其次注意共有整数的二进制数共有32位，i=30代表的是第31位✨
	{
		printf("%d ",((a>>i)&1)); //按位与
	}
	printf("\n");
	printf("偶数位：\n");
	for(i = 31 ; i>=1 ; i-=2) //i=31代表第32位
	{
		printf("%d ",((a>>i)&1));
	}
	printf("\n");
}
int main()
{
	int a  = 0 ;
	scanf("%d",&a);
	print(a);
	return 0 ;
}


//用函数实现?*?乘法口诀表
void print_table(int a)
{
	int i = 0 ;
	for(i = 1; i <= a ; i++) //行
	{
		int j = 0;
		for(j = 1 ; j <= i; j++) //列
		{
			printf("%d*%d=%-3d",i,j,i*j);
		}
		printf("\n");
	}
}
int main()
{
	int a = 0 ;
	scanf("%d",&a);
	print_table(a);
	return 0 ;
}


//递归的方法实现字符串逆序
int my_strlen(char arr[])
{
	int i = 0 ;
	int count = 0;
	while(arr[i] != '\0')
	{
		i ++ ; //i++不能忘
		count ++;
	}
	return count ;
}

//递归✨✨✨
void reverse_string(char arr[])
{
	char tmp = arr[0] ; //把a拿出来
	int length = my_strlen(arr);
	arr[0] = arr[length-1];//将a换成f
	arr[length -1] = '\0'; //将原本f的位置换上\0 - 为了下一步的递归逆序 - 

	//递归必须要有限制条件！！！
	//if(tmp != 0) //这个条件不对！✨✨
	//if(length >= 2) // 也不对！这里的length是arr的长度，而不是中间字符的长度

	if(my_strlen(arr+1) >= 2) //需要再次使用strlen函数计算中间字符串长度（末尾的字符已经变成了\0）是否 >= 2时，才需要逆序！！✨

	reverse_string(arr+1);//递归 - 逆序 arr+1代表首元素地址，并且最后一位也被改成了\0 - 即字符串变为："bcde"

	arr[length -1 ] = tmp ; //最后将\0换成a放在末尾✨
}

int main()
{
	char arr[] = "abcdef";
	printf("%s\n",arr);
	reverse_string(arr);
	printf("%s\n",arr);
	return 0 ; 
}
